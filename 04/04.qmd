---
title: "4 – Tables"
subtitle: "Introduction to R"
author: "Clemens Brunner"
date: 2023-12-18
format:
  html:
    page-layout: full
engine: knitr
knitr:
  opts_chunk: 
    R.options:
      width: 120
highlight-style: github
title-block-banner: true
theme:
  light: flatly
  dark: darkly
---

## Introduction

Vectors represent one-dimensional data such as a sequence of numbers. In practice, data is often available as a table consisting of two dimensions (rows and columns). R features two data types suitable to represent tabular data: `matrix` (or more generally `array`) and `data.frame`. Whereas a `matrix` is basically just a slightly enhanced vector (remember that all elements must have the same data type), data frames are more versatile, because they can hold columns with different data types.


## Matrix

### Relationship to vectors

Matrices are vectors with a special dimension attribute. We can access this attribute with the `dim()` function:

```{r}
(v = 1:20)
dim(v)
length(v)
```

A plain old vector does not have a dimension attribute, that's why we see `NULL` here. Of course, any vector has a length, which is why `length(v)` yields the number of elements in that vector.

We can now set the dimension attribute to the desired number of rows and columns (the product of the number of rows and columns must be equal to the total number of elements):

```{r}
dim(v) = c(4, 5)  # 4 rows, 5 columns
dim(v)
attributes(v)
v
class(v)
```

This example demonstrates that the underlying data does not change when we modify the dimension attribute. In fact, it is just the representation (or interpretation) of the data that is different.


### Creating matrices

In addition to changing the dimension attribute of a vector, we can directly create a matrix with the `matrix()` function:

```{r}
(m = matrix(1:20, 4, 5))
```

The first argument specifies the data (a vector), whereas the second and third arguments set the number of rows and columns of the matrix, respectively. By default, the data is pushed into the matrix column by column. Alternatively, `byrow=TRUE` switches to row-wise creation:

```{r}
matrix(1:20, 4, 5, byrow=TRUE)
```

:::{.callout-note}
A `matrix` is an `array` with two dimensions. We could also create arrays with an arbitrary number of dimensions, but these are rarely needed in statistical data analysis.
:::


### Row and column names

Similar to a named vector, we can provide names for rows and columns of a matrix:

```{r}
rownames(m) = c("w", "x", "y", "z")
colnames(m) = c("A", "B", "C", "D", "E")
m
```


### Indexing

Accessing individual elements of a matrix works just like with vectors. However, because matrices consist of rows and columns, we need to provide *two* indices (separated by a comma) inside the square brackets: a *row* index and a *column* index.

Either index can also be omitted, which is a concise way to access an entire row (when omitting the column index) or an entire column (when omitting the row index). Here are some examples:

```{r}
m[1, 4]  # row 1, column 4
m[, 3]  # column 3
m[3,]  # row 3
m[c(2, 4),]  # rows 2 and 4
m[c(1, 3), c(1, 2, 5)]
m[, "C"]  # column C
m[m[, "A"] > 2,]  # rows where column A > 2
```


### Coercion

What happens if we try to add a new column of type `character` to an existing (numeric) matrix? Just like with vectors, R coerces all matrix elements to the type that can accomodate both numbers and characters:

```{r}
subjects = c("Joe", "Tracy", "Steven", "Chloe")
cbind(subjects, m)
```

This example also demonstrates the use of `cbind()`, which binds matrices or vectors by columns (in the previous example, we combine the vector `subjects` with the matrix `m` to a new larger matrix). Analogously, `rbind()` combines matrices or vectors by rows.


### Working with matrices

Operations with matrices are performed elementwise (again, just like with vectors). In addition, there are several useful functions that only make sense with tabular data, for example to compute sums and means across rows or columns:

```{r}
rowSums(m)
colSums(m)
rowMeans(m)
colMeans(m)
```

A matrix is most useful for purely numerical data. Since matrices are vectors, they can only accommodate elements of the same data type. In practice, we often need to deal with variables of different types, and this is where data frames really shine.


## Data frames

Like matrices, data frames are two-dimensional data structures consisting of rows and columns. In contrast to a matrix, a data frame can contain columns of different data types. For example, a data frame can consist of a numerical columns, character columns, categorical columns, and so on. We can think of a data frame as a collection of columns, where each column is represented by a vector.

:::{.callout-note}
Technically, data frames are lists of vectors, where each vector corresponds to a column. We will not cover lists in this course and focus only on data frames instead.
:::


### Creating data frames

The function `data.frame()` creates a data frame from a set of vectors, which are usually passed as named arguments as follows:

```{r}
data.frame(x=1:5, id=c("X", "c1", "V", "RR", "7G"), value=c(12, 18, 19, 3, 8))
```

This automatically assigns column names corresponding to argument names.

Without named arguments, `data.frame()` works similar to `cbind()`, where it combines all arguments by column:

```{r}
(df = data.frame(subjects, m))
```

Like with matrices, we can use `colnames()` to get and set column names:

```{r}
colnames(df)
colnames(df) = c("patient", "age", "weight", "bp", "rating", "test")
df
```

Although `rownames()` works with data frames, renaming rows is rarely ever needed and should be avoided.


### Printing data frames

The three functions `str()`, `head()`, and `tail()` are essential for getting a quick overview of a data frame. In particular, `str()` summarizes the structure of an object:

```{r}
df = data.frame(
    patient=c("Joe", "Tracy", "Steven", "Chloe"),
    age=c(34, 17, 26, 44),
    weight=c(77, 60, 83, 64),
    height=c(175, 169, 185, 170)
)
str(df)
```

:::{.callout-note}
In the previous example, we created a data frame and used line breaks for better readability. If a command gets too long, consider inserting line breaks at suitable locations (such as after each argument).
:::

The function `head()` displays the first six rows of a data frame, whereas `tail()` displays the last six rows. If you want to show a different number of rows, pass the desired value as the argument `n`.

The following example shows these functions in action for a long data frame:

```{r}
l = data.frame(a=rnorm(5000), b=rpois(5000, 2), x=rep(letters, length.out=5000))
str(l)
head(l)
tail(l, n=4)
```

:::{.callout-tip}
The `View()` function will show the entire data frame in a spreadsheet. This is very convenient, but note that this view is read-only! 
:::


### Indexing

We can access individual columns of a data frame with `$` followed by the column name:

```{r}
df$patient
df$weight
```

Note that the result is a vector (because columns in a data frame are vectors).

This syntax also works for adding new columns. For example, we can add a new column called `new` as follows:

```{r}
df$new = c("yes", "no", "no", "yes")
df
```

:::{.callout-note}
Alternatively, we can use `cbind()` and `rbind()` to add new columns and rows, respectively.
:::

Columns in a data frame can also be removed by assigning the special value `NULL`:

```{r}
df$new = NULL  # remove column "new"
df
```

:::{.callout-tip}
We can also access individual columnsas follows (note the double square brackets):

```{r}
df[["patient"]]
df[["height"]]
```
:::

If we would like to access a subset of the data frame consisting of arbitrary rows and columns, we use indexing within square brackets. Similar to matrices, we need to provide both row and column indexes (separated by a comma). Omitting the row or column index implies all elements in that dimension are implicitly selected. The following examples show how to grab entire rows of a data frame:

```{r}
df[1,]
df[2:3,]
```

Similarly, here is how we can get entire columns:

```{r}
df[, 1]
df[, 4]
```

In addition to column numbers (positions), we can also provide column names (within quotes):

```{r}
df[, "patient"]
df[, "height"]
```

Combining both row and column indexes is also entirely possible:

```{r}
df[1:2, c(1, 3:4)]
```


## Tibbles

Data frames are one of the most widely used data types in R. However, getting a quick and clear overview of their contents can be cumbersome for two reasons. First, R prints too many data frame rows, which makes it difficult to get an overview of the data. The same is true if a data frame has many columns, R will usually print all columns even if they do not fit within the width of the R console.

:::{.callout-tip}
To illustrate the problem with displaying a data frame with many rows, try displaying a data frame with 2000 rows and 5 columns:

```r
data.frame(matrix(1:10000, 2000, 5))
```

Similarly, display the following data frame with many columns (this one consists of 100 rows and 100 columns):

```r
data.frame(matrix(1:10000, 100, 100))
```
:::

Another minor annoyance with data frames is that column types are only displayed when explicitly calling `str()` – they are not shown in the normal representation of the data frame.

The `tibble` package addresses these (and other) issues by providing an "extended" data frame type – the so-called `tibble`. A tibble is a drop-in replacement for a data frame, which means that it can be used everywhere a data frame is expected (because it basically *is* a data frame with some special behavior).

In contrast to data frames, tibbles are not part of base R, so we need to install and activate the `tibble` package:

```{r}
library(tibble)
```

To create a tibble, we can use `tibble()` instead of `data.frame()`:

```{r}
(t = tibble(
    subjects=c("Hans", "Birgit", "Ferdinand", "Johanna"),
    A=1:4,
    B=5:8,
    C=9:12,
    D=13:16,
    E=17:20
))
```

Displaying a tibble includes column types and also uses subtle colors in other places (at least in the R console) to make it easier to view the associated data values. In this example, `<chr>` means `character` and `<int>` refers to `integer` (a numeric vector consisting of integer numbers only). The first line of the output also includes the dimensions of the tibble.

Let's take a look at the `airquality` data frame, which is part of base R:

```{r}
str(airquality)
```

Because all 153 rows of this data frame are displayed when inspecting the object (by typing `airquality` in the console), we need to use `head()` or `tail()` to get a glimpse of the data (in addition to `str()`). This is typical for a data frame.

We can convert any data frame to a tibble with `as_tibble()`:

```{r}
(airquality_tibble = as_tibble(airquality))
```

As discussed previously, tibbles have a much nicer representation:

- Only the first 10 rows are shown.
- Column data types are included in the output.
- The dimensions are listed at the top of the table.

If you want to view all (or any other number of) rows of a tibble, use `print()` with a suitable argument `n` (the number of displayed rows):

```r
print(co2_tibble, n=Inf)  # n=Inf shows all rows
```

As we have already discussed previously, `View()` creates a spreadsheet-like view of the data, which is useful for interactive exploration:

```r
View(co2_tibble)  # opens a spreadsheet
```


## Exercises

1. Create a vector `u` consisting of integers from 50 to 99 and a vector `v` with integers from 0 to –49 (in descending order). Next, convert both `u` and `v` into two matrices with 10 rows each. Finally, create a new variable `r` containing both `u` and `v` concatenated horizontally (columnwise).

2. Answer the following questions about the matrix `r` from the previous exercise:

   - What are the dimensions of `r`?
   - How many elements does `r` have in total?
   - What is the element in row 7 and column 9?
   - What are the row and column means?
   - What is the mean of elements in rows 3–7 and columns 4–6?

3. Create a data frame or tibble `df` with 10 rows and 3 columns with the following contents:

   - The first column `name` contains the names Ben, Emma, Frank, Mia, Paul, Hannah, Lucas, Sophia, Jonathan, and Emily.
   - The second column `gender` contains the gender of each person (abbreviated with `m` or `f`).
   - The third column `age` contains the age of each person (a number between 10 and 90).

4. Based on `df` from the previous exercise, create two data frames `df_f` and `df_m` with only female and male persons, respectively.

5. List four ways to access the first column `name` of `df_f` created in the previous exercise.

6. Create a data frame `mtcars1` based on the built-in dataset `mtcars`, where `mtcars1` should only contain those rows of `mtcars` with values in column `mpg` greater than 25. Determine the number of rows for `mtcars` and `mtcars1`.

7. There is one important difference between data frames and tibbles when it comes to indexing. Try to pinpoint the different behavior using the built-in `airquality` data frame and `air = as_tibble(airquality)`. Compare the results when indexing the `Ozone` column using each of these four methods:

   - `[, 1]`
   - `[, "Ozone"]`
   - `$Ozone`
   - `[["Ozone"]]`

   Which object (`data.frame` or `tibble`) is more consistent in terms of indexing?

   :::{.callout-tip}
   A comprehensive overview of data frame subsetting operations is available [here](https://cbrnr.github.io/blog/r-dataframe-subsetting/).
   :::
